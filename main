import 'package:flutter/services.dart';

import './widget/chart.dart';
import './widget/trx_list.dart';
import "package:flutter/material.dart";
import './widget/trx_form.dart';
import './model/trx.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setPreferredOrientations(
    [
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown
    ],
  );
  runApp(ExpApp());
}

class ExpApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(primarySwatch: Colors.green),
      home: ExpHome(),
    );
  }
}

class ExpHome extends StatefulWidget {
  @override
  _ExpHomeState createState() => _ExpHomeState();
}

class _ExpHomeState extends State<ExpHome> with WidgetsBindingObserver {
  final List<Transaction> userTrx = [
    // Transaction(
    //   date: DateTime.now(),
    //   id: "007",
    //   item: "Kicks",
    //   price: 20,
    // ),
    // Transaction(
    //   date: DateTime.now(),
    //   id: "005",
    //   item: "Straps",
    //   price: 10,
    // ),
  ];

  bool switchInt = false;

  @override
  void initState() {
    WidgetsBinding.instance.addObserver(this);
    super.initState();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print(state);
  }

  @override
  dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  List<Transaction> get recentTrx {
    return userTrx.where((i) {
      return i.date.isAfter(DateTime.now().subtract(Duration(days: 7)));
    }).toList();
  }

  void addNewTrx(String txItem, double txPrice, DateTime slctDate) {
    final newTrx = Transaction(
      date: slctDate,
      id: DateTime.now().toString(),
      item: txItem,
      price: txPrice,
    );

    setState(() {
      userTrx.add(newTrx);
    });
  }

  void startAddNewTrx(BuildContext ctx) {
    showModalBottomSheet(
        context: ctx,
        builder: (_) {
          return TrxForm(addNewTrx);
        });
  }

  void deleteTrx(String id) {
    setState(() {
      userTrx.removeWhere((tx) => tx.id == id);
    });
  }

  // List <Widget> _landscapeContent(appBar, MediaQuery.of(context)) {
  //   //insert in here the widget tree, can pass in another widget shortcuts like
  //   // appBar that we created, put in the ()
  // }

  // Widget _portraitContent() {}

  List<Widget> _landscapeContent() {}

  @override
  Widget build(BuildContext context) {
    final mqSpace = (MediaQuery.of(context).size.height -
        MediaQuery.of(context).padding.top);

    final isLandscape =
        MediaQuery.of(context).orientation == Orientation.landscape;
    final appBar = AppBar(
      title: Text("Personal Expenses"),
      actions: [
        IconButton(
          icon: Icon(Icons.add),
          onPressed: () => startAddNewTrx(context),
        )
      ],
    );
    return Scaffold(
      appBar: appBar,
      body: SingleChildScrollView(
        child: Column(
          children: <Widget>[
            if (isLandscape)
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    "Chart",
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  Switch(
                      value: switchInt,
                      onChanged: (val) {
                        setState(() {
                          switchInt = val;
                        });
                        print(switchInt);
                      }),
                ],
              ),
            if (!isLandscape)
              Chart(recentTrx, (mqSpace - appBar.preferredSize.height) * 0.3),
            switchInt
                ? Chart(
                    recentTrx, (mqSpace - appBar.preferredSize.height) * 0.8)
                : Column(
                    children: [
                      Container(
                        height: isLandscape
                            ? (mqSpace - appBar.preferredSize.height) * 0.12
                            : (mqSpace - appBar.preferredSize.height) * 0.07,
                        child: Card(
                          child: Center(
                            child: Text(
                              "List of Spendings",
                              style: TextStyle(
                                  fontSize: 17,
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold),
                            ),
                          ),
                          color: Theme.of(context).primaryColor,
                        ),
                        width: double.infinity,
                      ),
                      TrxList(userTrx, deleteTrx,
                          (mqSpace - appBar.preferredSize.height) * 0.6),
                    ],
                  ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => startAddNewTrx(context),
        child: Icon(Icons.add),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.endDocked,
    );
  }
}
